syntax = "proto3";

package io.pipeline.engine.linear;

import "core/pipeline_core_types.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";

option java_package = "io.pipeline.engine.linear";
option java_multiple_files = true;
option java_outer_classname = "LinearPipelineConfigProto";

// Linear Pipeline Configuration
message LinearPipelineConfig {
  string pipeline_id = 1;
  string name = 2;
  string description = 3;
  string version = 4;
  repeated PipelineStage stages = 5;
  map<string, google.protobuf.Value> metadata = 6;
  google.protobuf.Timestamp created_at = 7;
  google.protobuf.Timestamp updated_at = 8;
  
  // Status and execution tracking
  PipelineStatus status = 9;
  repeated string tags = 10;
  string category = 11;
  bool is_active = 12;
  int64 execution_count = 13;
  google.protobuf.Timestamp last_executed_at = 14;
  string created_by = 15;
  string updated_by = 16;
}

// Pipeline execution stage
message PipelineStage {
  string stage_id = 1;
  string stage_name = 2;
  string module_name = 3;
  repeated ModuleInstance instances = 4;
  map<string, google.protobuf.Value> stage_metadata = 5;
}

// Module instance with specific configuration
message ModuleInstance {
  string instance_id = 1;
  string instance_name = 2;
  string module_name = 3;
  google.protobuf.Struct config = 4;
  bool enabled = 5;
  map<string, google.protobuf.Value> instance_metadata = 6;
}

// Pipeline status enum
enum PipelineStatus {
  PIPELINE_STATUS_UNSPECIFIED = 0;
  PIPELINE_STATUS_DRAFT = 1;
  PIPELINE_STATUS_ACTIVE = 2;
  PIPELINE_STATUS_INACTIVE = 3;
  PIPELINE_STATUS_ARCHIVED = 4;
}


// Linear Pipeline Execution Request
message LinearPipelineExecutionRequest {
  string pipeline_id = 1;
  repeated string document_ids = 2;
  string connector_id = 3;  // For querying documents by connector
  map<string, string> parameters = 4;
  bool stream_results = 5;
  string execution_id = 6;  // Optional: client-provided execution ID
}

// Linear Pipeline Execution Response (streaming)
message LinearPipelineExecutionResponse {
  string execution_id = 1;
  string document_id = 2;
  int32 current_stage = 3;
  int32 total_stages = 4;
  string stage_name = 5;
  LinearProcessingResult stage_result = 6;
  bool is_final = 7;
  google.protobuf.Timestamp timestamp = 8;
}

// Processing result for a stage
message LinearProcessingResult {
  LinearProcessingStatus status = 1;
  string error_message = 2;
  map<string, google.protobuf.Value> metadata = 3;
  int64 processing_time_ms = 4;
}

// Processing status enum
enum LinearProcessingStatus {
  PROCESSING_STATUS_UNSPECIFIED = 0;
  PROCESSING_STATUS_SUCCESS = 1;
  PROCESSING_STATUS_FAILED = 2;
  PROCESSING_STATUS_IN_PROGRESS = 3;
  PROCESSING_STATUS_SKIPPED = 4;
}

// Linear Pipeline Configuration Service
service LinearPipelineConfigService {
  // CRUD operations
  rpc CreatePipelineConfig(CreatePipelineConfigRequest) returns (CreatePipelineConfigResponse);
  rpc GetPipelineConfig(GetPipelineConfigRequest) returns (GetPipelineConfigResponse);
  rpc UpdatePipelineConfig(UpdatePipelineConfigRequest) returns (UpdatePipelineConfigResponse);
  rpc DeletePipelineConfig(DeletePipelineConfigRequest) returns (DeletePipelineConfigResponse);
  rpc ListPipelineConfigs(ListPipelineConfigsRequest) returns (ListPipelineConfigsResponse);
  
  // Search and filtering
  rpc SearchPipelineConfigs(SearchPipelineConfigsRequest) returns (SearchPipelineConfigsResponse);
  rpc GetPipelineConfigsByStatus(GetPipelineConfigsByStatusRequest) returns (GetPipelineConfigsByStatusResponse);
  rpc GetPipelineConfigsByTag(GetPipelineConfigsByTagRequest) returns (GetPipelineConfigsByTagResponse);
  
  // Execution operations
  rpc ExecuteLinearPipeline(LinearPipelineExecutionRequest) returns (stream LinearPipelineExecutionResponse);
  rpc ValidatePipelineConfig(ValidatePipelineConfigRequest) returns (ValidatePipelineConfigResponse);
  
  // Document operations
  rpc GetDocumentsByConnector(GetDocumentsByConnectorRequest) returns (GetDocumentsByConnectorResponse);
  rpc StorePipelineExecutionResult(StorePipelineExecutionResultRequest) returns (StorePipelineExecutionResultResponse);
}

// Request/Response messages
message CreatePipelineConfigRequest {
  LinearPipelineConfig config = 1;
}

message CreatePipelineConfigResponse {
  string pipeline_id = 1;
  bool success = 2;
  string message = 3;
}

message GetPipelineConfigRequest {
  string pipeline_id = 1;
}

message GetPipelineConfigResponse {
  LinearPipelineConfig config = 1;
  bool found = 2;
}

message UpdatePipelineConfigRequest {
  LinearPipelineConfig config = 1;
}

message UpdatePipelineConfigResponse {
  bool success = 1;
  string message = 2;
}

message DeletePipelineConfigRequest {
  string pipeline_id = 1;
}

message DeletePipelineConfigResponse {
  bool success = 1;
  string message = 2;
}

message ListPipelineConfigsRequest {
  int32 page_size = 1;
  string page_token = 2;
  string order_by = 3;
}

message ListPipelineConfigsResponse {
  repeated LinearPipelineConfig configs = 1;
  string next_page_token = 2;
  int32 total_count = 3;
}

message SearchPipelineConfigsRequest {
  string query = 1;
  repeated string tags = 2;
  PipelineStatus status = 3;
  int32 page_size = 4;
  string page_token = 5;
}

message SearchPipelineConfigsResponse {
  repeated LinearPipelineConfig configs = 1;
  string next_page_token = 2;
  int32 total_count = 3;
}

message GetPipelineConfigsByStatusRequest {
  PipelineStatus status = 1;
  int32 page_size = 2;
  string page_token = 3;
}

message GetPipelineConfigsByStatusResponse {
  repeated LinearPipelineConfig configs = 1;
  string next_page_token = 2;
  int32 total_count = 3;
}

message GetPipelineConfigsByTagRequest {
  string tag = 1;
  int32 page_size = 2;
  string page_token = 3;
}

message GetPipelineConfigsByTagResponse {
  repeated LinearPipelineConfig configs = 1;
  string next_page_token = 2;
  int32 total_count = 3;
}

message ValidatePipelineConfigRequest {
  LinearPipelineConfig config = 1;
}

message ValidatePipelineConfigResponse {
  bool valid = 1;
  repeated string errors = 2;
  repeated string warnings = 3;
}

message GetDocumentsByConnectorRequest {
  string connector_id = 1;
  int32 page_size = 2;
  string page_token = 3;
}

message GetDocumentsByConnectorResponse {
  repeated io.pipeline.data.v1.PipeDoc documents = 1;
  string next_page_token = 2;
  int32 total_count = 3;
}

message StorePipelineExecutionResultRequest {
  string execution_id = 1;
  string pipeline_id = 2;
  io.pipeline.data.v1.PipeStream result = 3;
  map<string, google.protobuf.Value> execution_metadata = 4;
}

message StorePipelineExecutionResultResponse {
  bool success = 1;
  string message = 2;
}
