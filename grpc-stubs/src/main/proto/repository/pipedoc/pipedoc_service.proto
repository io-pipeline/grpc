syntax = "proto3";

package io.pipeline.repository.pipedoc;

option java_multiple_files = true;
option java_package = "io.pipeline.repository.pipedoc";
option java_outer_classname = "PipeDocServiceProto";

import "core/pipeline_core_types.proto";

// Request to save a PipeDoc
message SavePipeDocRequest {
  io.pipeline.data.v1.PipeDoc pipedoc = 1;
  string drive = 2;  // Which drive/bucket to save to
  string connector_id = 3;  // Source connector ID
  map<string,string> metadata = 4;  // Additional metadata
}

// Response from saving a PipeDoc
message SavePipeDocResponse {
  string node_id = 1;  // Repository node ID for the saved PipeDoc
  string drive = 2;
  string s3_key = 3;  // Full S3 key
  int64 size_bytes = 4;
  string checksum = 5;
  int64 created_at_epoch_ms = 6;
}

// Request to retrieve a PipeDoc
message GetPipeDocRequest {
  string node_id = 1;  // Repository node ID
}

// Response with the PipeDoc
message GetPipeDocResponse {
  io.pipeline.data.v1.PipeDoc pipedoc = 1;
  string node_id = 2;
  string drive = 3;
  int64 size_bytes = 4;
  int64 retrieved_at_epoch_ms = 5;
}

// Request to list PipeDocs
message ListPipeDocsRequest {
  string drive = 1;
  string connector_id = 2;  // Optional: filter by connector
  int32 limit = 3;  // Optional: max results (default 100)
  string continuation_token = 4;  // For pagination
}

// Response with list of PipeDoc metadata
message ListPipeDocsResponse {
  repeated PipeDocMetadata pipedocs = 1;
  string next_continuation_token = 2;  // For pagination
  int32 total_count = 3;
}

// Metadata about a saved PipeDoc
message PipeDocMetadata {
  string node_id = 1;
  string doc_id = 2;  // From PipeDoc.doc_id
  string drive = 3;
  string connector_id = 4;
  int64 size_bytes = 5;
  int64 created_at_epoch_ms = 6;
  map<string,string> metadata = 7;
  string title = 8;  // From SearchMetadata if available
  string document_type = 9;  // From SearchMetadata if available
}

// Service for PipeDoc operations
service PipeDocService {
  // Save a PipeDoc to repository
  rpc SavePipeDoc(SavePipeDocRequest) returns (SavePipeDocResponse);

  // Retrieve a PipeDoc by node ID
  rpc GetPipeDoc(GetPipeDocRequest) returns (GetPipeDocResponse);

  // List PipeDocs with optional filtering
  rpc ListPipeDocs(ListPipeDocsRequest) returns (ListPipeDocsResponse);
}