syntax = "proto3";

package io.pipeline.platform.registration;

option java_package = "io.pipeline.platform.registration";
option java_outer_classname = "PlatformRegistrationProto";
option java_multiple_files = true;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "module/module_service.proto";

// Unified registration service for all platform services and modules
service PlatformRegistration {
  // Register a service with streaming status updates
  rpc RegisterService(ServiceRegistrationRequest) returns (stream RegistrationEvent);
  
  // Register a module (document processor) with streaming status updates
  rpc RegisterModule(ModuleRegistrationRequest) returns (stream RegistrationEvent);
  
  // Unregister a service
  rpc UnregisterService(UnregisterRequest) returns (UnregisterResponse);
  
  // Unregister a module
  rpc UnregisterModule(UnregisterRequest) returns (UnregisterResponse);
  
  // List all registered services
  rpc ListServices(google.protobuf.Empty) returns (ServiceListResponse);
  
  // List all registered modules
  rpc ListModules(google.protobuf.Empty) returns (ModuleListResponse);
  
  // Get specific service details
  rpc GetService(ServiceLookupRequest) returns (ServiceDetails);
  
  // Get specific module details
  rpc GetModule(ServiceLookupRequest) returns (ModuleDetails);
  
  // Resolve service endpoint for dynamic routing
  // Returns the best available instance of a service based on health and load
  rpc ResolveService(ServiceResolveRequest) returns (ServiceResolveResponse);

  // Watch for real-time updates to the list of all healthy services.
  // The server will send an initial list, and then send a new full
  // list whenever any service is registered, unregistered, or changes
  // its health status.
  rpc WatchServices(google.protobuf.Empty) returns (stream ServiceListResponse);
}

// Service registration request
message ServiceRegistrationRequest {
  string service_name = 1;        // Logical service name (e.g., "mapping-service")
  string host = 2;                // Host where service is running
  int32 port = 3;                 // gRPC port
  string version = 4;              // Service version
  map<string, string> metadata = 5; // Additional metadata
  repeated string tags = 6;        // Tags for discovery
  repeated string capabilities = 7; // Service capabilities
}

// Module registration request (for document processors)
message ModuleRegistrationRequest {
  string module_name = 1;          // Module name (e.g., "tika-parser")
  string host = 2;                 // Host where module is running
  int32 port = 3;                  // gRPC port
  string version = 4;               // Module version
  map<string, string> metadata = 5; // Additional metadata
  
  // Module-specific fields
  io.pipeline.data.module.ServiceRegistrationMetadata serviceRegistrationMetadata = 6; //module-specific metadata
}

// Streaming registration event
message RegistrationEvent {
  EventType event_type = 1;
  google.protobuf.Timestamp timestamp = 2;
  string message = 3;
  
  // Event-specific data
  oneof event_data {
    string service_id = 4;        // Consul service ID when registered
    string error_detail = 5;      // Error details if failed
    EventMetadata metadata = 6;   // Additional event metadata
  }
}

// Event metadata wrapper (since map can't be in oneof)
message EventMetadata {
  map<string, string> values = 1;
}

// Registration event types
enum EventType {
  EVENT_TYPE_UNSPECIFIED = 0;
  STARTED = 1;                    // Registration process started
  VALIDATED = 2;                  // Input validated
  CONSUL_REGISTERED = 3;          // Registered with Consul
  HEALTH_CHECK_CONFIGURED = 4;    // Health check set up
  CONSUL_HEALTHY = 5;             // Service reported healthy to Consul
  COMPLETED = 6;                  // Registration completed successfully
  FAILED = 7;                     // Registration failed
  METADATA_RETRIEVED = 8;         // Module metadata fetched from module callback
  SCHEMA_VALIDATED = 9;           // Schema validated or synthesized
  DATABASE_SAVED = 10;            // Registration persisted to database
  APICURIO_REGISTERED = 11;       // Schema registered in Apicurio
}

// Unregister request
message UnregisterRequest {
  string service_name = 1;         // Service/module name
  string host = 2;                 // Host
  int32 port = 3;                  // Port
  // Natural key is service_name + host + port
}

// Unregister response
message UnregisterResponse {
  bool success = 1;
  string message = 2;
  google.protobuf.Timestamp timestamp = 3;
}

// Service lookup request
message ServiceLookupRequest {
  oneof lookup_key {
    string service_name = 1;      // Look up by name (returns all instances)
    string service_id = 2;        // Look up by specific Consul service ID
  }
}

// Service resolve request - for dynamic service discovery
message ServiceResolveRequest {
  string service_name = 1;         // Service name to resolve (e.g., "mapping-service")
  
  // Optional: prefer specific criteria
  bool prefer_local = 2;           // Prefer instance on same host
  repeated string required_tags = 3; // Only return instances with these tags
  repeated string required_capabilities = 4; // Only return instances with these capabilities
}

// Service resolve response - returns the best available instance
message ServiceResolveResponse {
  bool found = 1;                  // Whether a healthy instance was found
  string service_name = 2;         // Service name that was resolved
  string host = 3;                 // Host of the selected instance
  int32 port = 4;                  // Port of the selected instance
  string service_id = 5;           // Consul service ID of selected instance
  
  // Additional details
  map<string, string> metadata = 6;
  repeated string tags = 7;
  repeated string capabilities = 8;
  string version = 9;
  
  // Resolution metadata
  int32 total_instances = 10;     // Total number of instances found
  int32 healthy_instances = 11;   // Number of healthy instances
  string selection_reason = 12;   // Why this instance was selected
  google.protobuf.Timestamp resolved_at = 13;
}

// Service details
message ServiceDetails {
  string service_name = 1;
  string service_id = 2;           // Consul service ID
  string host = 3;
  int32 port = 4;
  string version = 5;
  map<string, string> metadata = 6;
  repeated string tags = 7;
  repeated string capabilities = 8;
  bool is_healthy = 9;
  google.protobuf.Timestamp registered_at = 10;
  google.protobuf.Timestamp last_health_check = 11;
}

// Module details
message ModuleDetails {
  string module_name = 1;
  string service_id = 2;           // Consul service ID
  string host = 3;
  int32 port = 4;
  string version = 5;
  map<string, string> metadata = 6;
  string input_format = 7;
  string output_format = 8;
  repeated string document_types = 9;
  bool is_healthy = 10;
  google.protobuf.Timestamp registered_at = 11;
  google.protobuf.Timestamp last_health_check = 12;
}

// List services response
message ServiceListResponse {
  repeated ServiceDetails services = 1;
  google.protobuf.Timestamp as_of = 2;
  int32 total_count = 3;
}

// List modules response
message ModuleListResponse {
  repeated ModuleDetails modules = 1;
  google.protobuf.Timestamp as_of = 2;
  int32 total_count = 3;
}

// Events for OpenSearch indexing via Kafka
message ServiceRegistered {
  string service_id = 1;
  string service_name = 2;
  string host = 3;
  int32 port = 4;
  string version = 5;
  google.protobuf.Timestamp timestamp = 6;
}

message ServiceUnregistered {
  string service_id = 1;
  string service_name = 2;
  google.protobuf.Timestamp timestamp = 3;
}

message ModuleRegistered {
  string service_id = 1;
  string module_name = 2;
  string host = 3;
  int32 port = 4;
  string version = 5;
  string schema_id = 6;
  string apicurio_artifact_id = 7;
  google.protobuf.Timestamp timestamp = 8;
}

message ModuleUnregistered {
  string service_id = 1;
  string module_name = 2;
  google.protobuf.Timestamp timestamp = 3;
}