syntax = "proto3";

package io.pipeline.linear.processor.v1;

import "google/protobuf/timestamp.proto";
import "core/pipeline_core_types.proto";
import "module/module_service.proto";
option java_multiple_files = true;
option java_package = "io.pipeline.linear.processor.v1";
option java_outer_classname = "LinearPipelineProcessorProto";

// Linear Pipeline Processor Service - Pipeline execution for development/testing
service LinearPipelineProcessor {
  // Execute pipeline on documents
  rpc ExecuteLinearPipeline(ExecuteLinearPipelineRequest) returns (stream ExecuteLinearPipelineResponse);
  
  // Batch process multiple documents through pipelines
  rpc BatchProcessLinearDocuments(stream BatchLinearProcessRequest) returns (stream BatchLinearProcessResponse);
  
  // Test single document through single module (for quick testing)
  rpc ProcessLinearDocument(ProcessLinearDocumentRequest) returns (ProcessLinearDocumentResponse);
  
  // Validate pipeline configuration
  rpc ValidateLinearPipeline(ValidateLinearPipelineRequest) returns (ValidateLinearPipelineResponse);
}

// Pipeline execution request
message ExecuteLinearPipelineRequest {
  string pipeline_id = 1;
  repeated string document_ids = 2;
  map<string, string> parameters = 3;
  bool stream_results = 4; // Stream intermediate results
}

message ExecuteLinearPipelineResponse {
  string document_id = 1;
  int32 current_stage = 2;
  int32 total_stages = 3;
  string stage_name = 4;
  LinearProcessingResult stage_result = 5;
  bool is_final = 6;
}

// Batch processing
message BatchLinearProcessRequest {
  string document_id = 1;
  string pipeline_id = 2;
  map<string, string> parameters = 3; // Runtime parameters
}

message BatchLinearProcessResponse {
  string document_id = 1;
  string pipeline_id = 2;
  LinearProcessingResult result = 3;
  int32 stage_completed = 4;
  int32 total_stages = 5;
}

// Single document processing (for quick testing)
message ProcessLinearDocumentRequest {
  oneof source {
    string storage_id = 1; // Use existing document from repository by storage_id
    io.pipeline.data.v1.PipeDoc inline_document = 2; // Provide document inline
  }
  string module_address = 3;
  bytes module_config = 4; // Module configuration as JSON
  bool save_result = 5; // Whether to save result to repository
}

message ProcessLinearDocumentResponse {
  io.pipeline.data.module.ModuleProcessResponse module_response = 1; // Full response from module
  LinearProcessingStatus status = 2;
  string error_message = 3;
  int64 processing_time_ms = 4;
  string result_storage_id = 5; // If saved to repository
}

// Pipeline validation
message ValidateLinearPipelineRequest {
  oneof pipeline_source {
    string pipeline_id = 1; // Validate existing pipeline from repository
    LinearPipeline inline_pipeline = 2; // Validate pipeline definition
  }
  bool check_module_connectivity = 3;
  bool validate_configurations = 4;
}

message ValidateLinearPipelineResponse {
  bool valid = 1;
  repeated LinearValidationError errors = 2;
  repeated LinearValidationWarning warnings = 3;
}

message LinearValidationError {
  string stage_id = 1;
  string field = 2;
  string message = 3;
  LinearErrorType error_type = 4;
}

enum LinearErrorType {
  ERROR_TYPE_UNSPECIFIED = 0;
  ERROR_TYPE_CONNECTIVITY = 1;
  ERROR_TYPE_CONFIGURATION = 2;
  ERROR_TYPE_FIELD_MAPPING = 3;
  ERROR_TYPE_MISSING_DEPENDENCY = 4;
}

message LinearValidationWarning {
  string stage_id = 1;
  string message = 2;
}

// Pipeline definitions for linear processor
message LinearPipeline {
  string pipeline_id = 1;
  string name = 2;
  string description = 3;
  repeated LinearPipelineStage stages = 4;
  map<string, string> parameters = 5; // Default parameters
  google.protobuf.Timestamp created_at = 6;
  google.protobuf.Timestamp updated_at = 7;
}

message LinearPipelineStage {
  string stage_id = 1;
  string stage_name = 2;
  string module_address = 3; // gRPC service address
  bytes module_config = 4; // Module configuration as JSON
  int32 order = 5; // Stage execution order
  repeated string dependencies = 6; // Other stages this depends on
}

enum LinearProcessingStatus {
  PROCESSING_STATUS_UNSPECIFIED = 0;
  PROCESSING_STATUS_SUCCESS = 1;
  PROCESSING_STATUS_FAILED = 2;
  PROCESSING_STATUS_SKIPPED = 3;
  PROCESSING_STATUS_IN_PROGRESS = 4;
}

// Processing results for pipeline execution
message LinearProcessingResult {
  io.pipeline.data.v1.PipeDoc output_document = 1;
  LinearProcessingStatus status = 2;
  string error_message = 3;
  int64 processing_time_ms = 4;
  repeated string logs = 5;
}