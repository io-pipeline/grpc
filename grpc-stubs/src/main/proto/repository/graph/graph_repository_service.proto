syntax = "proto3";

package io.pipeline.repository.v1;

import "core/repository_service_data.proto";
import "core/pipeline_config_models.proto";

option java_package = "io.pipeline.repository.v1";
option java_multiple_files = true;

// ============================================================================
// GRAPH REPOSITORY SERVICE
// ============================================================================

// Service for managing graph nodes, edges, and topology operations
service GraphRepositoryService {
  // ========== NODE OPERATIONS ==========
  rpc CreateNode(CreateNodeRequest) returns (io.pipeline.config.v1.GraphNode);
  rpc GetNode(GetNodeRequest) returns (io.pipeline.config.v1.GraphNode);
  rpc UpdateNode(UpdateNodeRequest) returns (io.pipeline.config.v1.GraphNode);
  rpc DeleteNode(DeleteNodeRequest) returns (DeleteResponse);
  rpc ListNodes(ListNodesRequest) returns (ListNodesResponse);
  
  // ========== GRAPH OPERATIONS ==========
  rpc CreateGraph(CreateGraphRequest) returns (io.pipeline.config.v1.PipelineGraph);
  rpc GetGraph(GetGraphRequest) returns (io.pipeline.config.v1.NetworkTopology);
  rpc UpdateGraph(UpdateGraphRequest) returns (io.pipeline.config.v1.PipelineGraph);
  rpc DeleteGraph(DeleteGraphRequest) returns (DeleteResponse);
  rpc ListGraphs(ListGraphsRequest) returns (ListGraphsResponse);
  
  // ========== DNS-LIKE NODE RESOLUTION ==========
  rpc ResolveNode(ResolveNodeRequest) returns (io.pipeline.config.v1.NodeLookupResponse);
  rpc ResolveNextNodes(ResolveNextNodesRequest) returns (ResolveNextNodesResponse);
  rpc ResolveCrossClusterNode(io.pipeline.config.v1.CrossClusterNodeLookup) returns (io.pipeline.config.v1.NodeLookupResponse);
  
  // ========== KAFKA TOPIC DISCOVERY ==========
  rpc FindNodesByInputTopic(FindNodesByTopicRequest) returns (FindNodesByTopicResponse);
  rpc FindNodesByOutputTopic(FindNodesByTopicRequest) returns (FindNodesByTopicResponse);
  
  // ========== LOOP DETECTION ==========
  rpc DetectLoops(DetectLoopsRequest) returns (DetectLoopsResponse);
  
  // ========== NETWORK TOPOLOGY ==========
  rpc GetNetworkTopology(GetNetworkTopologyRequest) returns (io.pipeline.config.v1.NetworkTopology);
  
  // ========== REAL-TIME UPDATES ==========
  rpc SubscribeToUpdates(SubscribeToUpdatesRequest) returns (stream io.pipeline.config.v1.GraphUpdateNotification);
}

// ============================================================================
// NODE REQUEST/RESPONSE MESSAGES
// ============================================================================

// Create Node request
message CreateNodeRequest {
  string cluster_id = 1;
  string name = 2;
  io.pipeline.config.v1.NodeType node_type = 3;
  string module_id = 4;
  io.pipeline.config.v1.JsonConfigOptions custom_config = 5;
  io.pipeline.config.v1.TransportConfig transport = 6;
}

// Get Node request
message GetNodeRequest {
  string node_id = 1;
}

// Update Node request
message UpdateNodeRequest {
  string node_id = 1;
  string name = 2;
  io.pipeline.config.v1.JsonConfigOptions custom_config = 3;
  io.pipeline.config.v1.TransportConfig transport = 4;
}

// Delete Node request
message DeleteNodeRequest {
  string node_id = 1;
}

// List Nodes request
message ListNodesRequest {
  string cluster_id = 1;
  io.pipeline.config.v1.NodeType node_type = 2; // Optional filter
  PaginationRequest pagination = 3;
}

// List Nodes response
message ListNodesResponse {
  repeated io.pipeline.config.v1.GraphNode nodes = 1;
  string next_page_token = 2;
  int32 total_count = 3;
}

// ============================================================================
// GRAPH REQUEST/RESPONSE MESSAGES
// ============================================================================

// Create Graph request
message CreateGraphRequest {
  string cluster_id = 1;
  string name = 2;
  string description = 3;
  repeated string node_ids = 4;
  repeated io.pipeline.config.v1.GraphEdge edges = 5;
}

// Get Graph request
message GetGraphRequest {
  string graph_id = 1;
}

// Update Graph request
message UpdateGraphRequest {
  string graph_id = 1;
  string name = 2;
  string description = 3;
  repeated string node_ids = 4;
  repeated io.pipeline.config.v1.GraphEdge edges = 5;
}

// Delete Graph request
message DeleteGraphRequest {
  string graph_id = 1;
}

// List Graphs request
message ListGraphsRequest {
  string cluster_id = 1;
  PaginationRequest pagination = 2;
}

// List Graphs response
message ListGraphsResponse {
  repeated io.pipeline.config.v1.PipelineGraph graphs = 1;
  string next_page_token = 2;
  int32 total_count = 3;
}

// ============================================================================
// DNS-LIKE RESOLUTION MESSAGES
// ============================================================================

// Resolve Node request
message ResolveNodeRequest {
  string node_id = 1;
  string cluster_id = 2; // Optional: for cross-cluster resolution
  bool use_cache = 3; // Default true
}

// Resolve Next Nodes request
message ResolveNextNodesRequest {
  string current_node_id = 1;
  string current_cluster_id = 2;
  string condition = 3; // Optional routing condition
  bool include_cross_cluster = 4; // Default false
}

// Resolve Next Nodes response
message ResolveNextNodesResponse {
  repeated io.pipeline.config.v1.NodeLookupResponse next_nodes = 1;
  repeated io.pipeline.config.v1.CrossClusterNodeLookup cross_cluster_nodes = 2;
}

// ============================================================================
// KAFKA TOPIC DISCOVERY MESSAGES
// ============================================================================

// Find Nodes by Topic request
message FindNodesByTopicRequest {
  string topic_name = 1;
  string cluster_id = 2; // Optional: search specific cluster
  bool input_topic = 3; // true for input, false for output
}

// Find Nodes by Topic response
message FindNodesByTopicResponse {
  repeated io.pipeline.config.v1.GraphNode nodes = 1;
}

// ============================================================================
// LOOP DETECTION MESSAGES
// ============================================================================

// Detect Loops request
message DetectLoopsRequest {
  string starting_node_id = 1;
  string cluster_id = 2;
  int32 max_depth = 3; // Prevent infinite traversal
}

// Detect Loops response
message DetectLoopsResponse {
  bool has_loops = 1;
  repeated LoopPath detected_loops = 2;
}

// Loop Path definition
message LoopPath {
  repeated string node_ids = 1;
  repeated string cluster_ids = 2; // Parallel to node_ids
}

// ============================================================================
// NETWORK TOPOLOGY MESSAGES
// ============================================================================

// Get Network Topology request
message GetNetworkTopologyRequest {
  string cluster_id = 1;
  bool include_cross_cluster = 2;
  int32 max_depth = 3; // For large networks
}

// ============================================================================
// REAL-TIME UPDATES MESSAGES
// ============================================================================

// Subscribe to Updates request
message SubscribeToUpdatesRequest {
  string cluster_id = 1;
  repeated io.pipeline.config.v1.UpdateType update_types = 2; // Filter by update types
}
